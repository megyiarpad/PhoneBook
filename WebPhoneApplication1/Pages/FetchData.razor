@page "/fetchdata"
@inject HttpClient Http
@using System.Net.Http
@using System.Net.Http.Json


@namespace WebPhoneApplication1

<h1>Phone Book</h1>

@if (phones == null)
{
    <p><em>Loading...</em></p>
}
else
{
<button class="btn" @onclick="@(async()=> await SwitchRows())">Switch Name Columns</button>

                @if (!isSwitched)
                {
                    switched = "First";
                } else if (isSwitched)
                {
                    switched = "Last";
                }
<button class="btn" @onclick="@(async()=> await SortRecords(switched))">Change Order</button>
    <table class="table">
        <thead>
            <tr>
                @if (!isSwitched)
                {
                    <th> First Name</th>
                    <th>Last Name</th>
                }
                else if (isSwitched)
                {
                    <th>Last Name</th>
                    <th>First Name</th>
                }

                <th>Phone number</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var phone in phones)
            {
                <tr>
                    @if (!isSwitched)
                    {
                        <td>@phone.FirstName</td>
                        <td>@phone.LastName</td>
                    }
                    else if (isSwitched)
                    {
                        <td>@phone.LastName</td>
                        <td>@phone.FirstName</td>
                    }
                    <td>@phone.PhoneNumber</td>
                    <td><button class="btn btn-primary" @onclick="@(async () => await DeleteItem(phone.ID))">Delete</button></td>
                </tr>
            }
        </tbody>
    </table>

    <div class="pagination">
        <button class="btn" @onclick="@(async()=> await NavigateToPage("prev"))">Prev</button>
        @for (int i = startPage; i < endPage + 1; i++)
        {
            var currentPage = i;
            <button class="btn pagebutton @(currentPage==curPage?"btn-danger":"")" @onclick="@(async()=> await RefreshRecord(currentPage))">
                @currentPage
            </button>
        }
        <button class="btn" @onclick="@(async()=> await NavigateToPage("next"))">Next</button>
    </div>

}

@code {
    public List<Phone> phones { get; set; } = new List<Phone>();
    public PhoneDTO phoneDTO = new PhoneDTO();

    bool isSortedFirst = true;
    bool isSortedLast = false;
    bool isSwitched = false;
    string urlEnd;
    string switched;

    int totalPages;
    int totalRecords;
    int curPage;
    int pagerSize;
    int pageSize;
    int startPage;
    int endPage;

    protected override async Task OnInitializedAsync()
    {
        isSortedFirst = true;
        isSortedLast = false;
        isSwitched = false;
        switched = "First";
        pageSize = 10;
        pagerSize = 3;
        curPage = 1;
        phoneDTO = await Http.GetFromJsonAsync<PhoneDTO>("api/Phone?PageNumber=" + curPage + "&PageSize=" + pageSize);
        phones = phoneDTO.Phones;
        totalRecords = phoneDTO.TotalCount;

        totalPages = (int)Math.Ceiling(totalRecords / (decimal)pageSize);

        SetPagerSize("forward");
    }

    public async Task NavigateToPage(string direction)
    {
        if (direction == "next")
        {
            if (curPage < totalPages)
            {
                if (curPage == endPage)
                {
                    SetPagerSize("forward");

                }
                curPage += 1;
            }
        }
        else if (direction == "prev")
        {
            if (curPage > 1)
            {
                if (curPage == startPage)
                {
                    SetPagerSize("back");

                }
                curPage -= 1;
            }
        }
    }

    public async Task RefreshRecord(int currentPage)
    {


        curPage = currentPage;
        phoneDTO = await Http.GetFromJsonAsync<PhoneDTO>("api/Phone?PageNumber=" + curPage + "&PageSize=" + pageSize + urlEnd);
        phones = phoneDTO.Phones;
        this.StateHasChanged();
    }

    public async Task SortRecords(string by)
    {
        if (by == "First")
        {
            if (isSortedFirst)
            {
                phoneDTO = await Http.GetFromJsonAsync<PhoneDTO>("api/Phone?PageNumber=" + curPage + "&PageSize=" + pageSize + "&by=desc&row=First");
                isSortedFirst = false;
                urlEnd = "&by=desc&row=First";
            }
            else if (!isSortedFirst)
            {
                phoneDTO = await Http.GetFromJsonAsync<PhoneDTO>("api/Phone?PageNumber=" + curPage + "&PageSize=" + pageSize + "&by=asc&row=First");
                isSortedFirst = true;
                urlEnd = "&by=asc&row=First";
            }
        }
        else if (by == "Last")
        {
            if (isSortedLast)
            {
                phoneDTO = await Http.GetFromJsonAsync<PhoneDTO>("api/Phone?PageNumber=" + curPage + "&PageSize=" + pageSize + "&by=desc&row=Last");
                isSortedLast = false;
                urlEnd = "&by=desc&row=Last";
            }
            else if (!isSortedLast)
            {
                phoneDTO = await Http.GetFromJsonAsync<PhoneDTO>("api/Phone?PageNumber=" + curPage + "&PageSize=" + pageSize + "&by=asc&row=Last");
                isSortedLast = true;
                urlEnd = "&by=asc&row=Last";
            }

        }
        phones = phoneDTO.Phones;
        this.StateHasChanged();
    }
    public async Task SwitchRows()
    {
        isSwitched = !isSwitched;
        this.StateHasChanged();
    }
    public void SetPagerSize(String direction)
    {
        if (direction == "forward" && endPage < totalPages)
        {
            startPage = endPage + 1;
            if (endPage + pagerSize < totalPages)
            {
                endPage = startPage + pagerSize - 1;
            }
            else
            {
                endPage = totalPages;
            }
            this.StateHasChanged();
        }
        else if (direction == "back" && startPage > 1)
        {
            endPage = startPage - 1;
            startPage = startPage - pagerSize;
        }
        this.StateHasChanged();
    }
}

@code {
    private async Task DeleteItem(int id)
    {
        await Http.DeleteAsync($"api/Phone?delPhone={id}");
        phones.RemoveAll(x => x.ID == id);
        this.StateHasChanged();
    }
}


